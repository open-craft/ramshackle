.PHONY: clean coverage diff_cover help  quality selfcheck test validate

.DEFAULT_GOAL := help

# PROJECT_ROOT is usually '/edx/src/ramshackle/' on an Open edX devstack
PROJECT_ROOT := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

define BROWSER_PYSCRIPT
import os, webbrowser, sys
try:
	from urllib import pathname2url
except:
	from urllib.request import pathname2url

webbrowser.open("file://" + pathname2url(os.path.abspath(sys.argv[1])))
endef
export BROWSER_PYSCRIPT
BROWSER := python -c "$$BROWSER_PYSCRIPT"

help: ## display this help message
	@echo "Please use \`make <target>' where <target> is one of"
	@perl -nle'print $& if m{^[a-zA-Z_-]+:.*?## .*$$}' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-25s\033[0m %s\n", $$1, $$2}'

clean: ## remove generated byte code, coverage reports, and build artifacts
	find $(PROJECT_ROOT) -name '__pycache__' -exec rm -rf {} +
	find $(PROJECT_ROOT) -name '*.pyc' -exec rm -f {} +
	find $(PROJECT_ROOT) -name '*.pyo' -exec rm -f {} +
	find $(PROJECT_ROOT) -name '*~' -exec rm -f {} +
	cd $(PROJECT_ROOT) && coverage erase
	rm -fr $(PROJECT_ROOT)build/
	rm -fr $(PROJECT_ROOT)dist/
	# Do not delete the .egg-info because it will uninstall the entry point
	# and thus unregister the plugin.
	# rm -fr $(PROJECT_ROOT)*.egg-info

coverage: clean ## generate and view HTML coverage report
	pytest --cov-report html
	$(BROWSER) htmlcov/index.html

# upgrade: export CUSTOM_COMPILE_COMMAND=make upgrade
# upgrade: ## update the requirements/*.txt files with the latest packages satisfying requirements/*.in
# 	pip install -qr requirements/pip-tools.txt
# 	# Make sure to compile files after any other files they include!
# 	pip-compile --upgrade -o requirements/pip-tools.txt requirements/pip-tools.in
# 	pip-compile --upgrade -o requirements/base.txt requirements/base.in
# 	pip-compile --upgrade -o requirements/test.txt requirements/test.in
# 	pip-compile --upgrade -o requirements/doc.txt requirements/doc.in
# 	pip-compile --upgrade -o requirements/quality.txt requirements/quality.in
# 	pip-compile --upgrade -o requirements/travis.txt requirements/travis.in
# 	pip-compile --upgrade -o requirements/dev.txt requirements/dev.in
# 	# Let tox control the Django version for tests
# 	sed '/^[dD]jango==/d' requirements/test.txt > requirements/test.tmp
# 	mv requirements/test.tmp requirements/test.txt

quality: ## check coding style with pycodestyle and pylint
	pylint ramshackle $(PROJECT_ROOT)setup.py
	pylint --py3k ramshackle $(PROJECT_ROOT)setup.py
	pycodestyle $(PROJECT_ROOT)ramshackle $(PROJECT_ROOT)setup.py
	isort --check-only --diff --recursive $(PROJECT_ROOT)ramshackle $(PROJECT_ROOT)setup.py

# requirements: ## install development environment requirements
# 	pip install -qr requirements/pip-tools.txt
# 	pip-sync requirements/dev.txt requirements/private.*

# test target:
# Meant to be run in Studio's vitrualenv
# We don't use tox because we need to test with the real installation of
# Open edX and whatever dependencies it uses.
# We use no-cov and nomigrations because they _really_ speed up the test run.
test: clean
	python -m pytest --ds=cms.envs.test --no-cov --nomigrations $(PROJECT_ROOT)ramshackle/tests/

diff_cover: test ## find diff lines that need test coverage
	diff-cover coverage.xml

validate: quality test ## run tests and quality checks

selfcheck: ## check that the Makefile is well-formed
	@echo "The Makefile is well-formed."
